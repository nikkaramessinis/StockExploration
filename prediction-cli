#!/bin/python3

import subprocess

import nbformat
from nbconvert import PythonExporter


def execute_notebook(notebook_path, end_date):
    with open(notebook_path, "r", encoding="utf-8") as nb_file:
        notebook_content = nb_file.read()

    nb = nbformat.reads(notebook_content, as_version=4)
    exporter = PythonExporter()
    source, meta = exporter.from_notebook_node(nb)

    source = source.replace("get_ipython().system", "subprocess.run")
    source = source.replace("pip install", "pip3 install")

    source_lines = source.split("\n")
    updated_source_lines = []
    end_date_replaced = False

    for line in source_lines:
        if not end_date_replaced and "end_date" in line:
            line_parts = line.split("=")
            if len(line_parts) == 2:
                line_parts[1] = f' "{end_date}"'
                line = "=".join(line_parts)
                end_date_replaced = True
        if "subprocess.run" in line:
            command_start = line.find("(") + 1
            command_end = line.find(")")
            command = line[command_start:command_end].strip().strip("'\"")
            updated_line = f"subprocess.run({command.split()})"
            updated_source_lines.append(updated_line)
        else:
            updated_source_lines.append(line)

    updated_source = "\n".join(updated_source_lines)

    temp_notebook_path = notebook_path + "_temp.py"
    with open(temp_notebook_path, "w", encoding="utf-8") as script_file:
        script_file.write("import subprocess\n" + updated_source)

    subprocess.run(["python3", temp_notebook_path])

    print("Notebook executed successfully.")


if __name__ == "__main__":
    notebook_dir = "Strategies-notebooks"
    notebook_name = "Algorithmic_Trading_Machine_Learning_Quant_Strategies.ipynb"
    execute_notebook(f"{notebook_dir}/{notebook_name}", "2024-06-01")

    ##### for future pass args #####
    ### e.g python3 prediction-cli Algorithmic_Trading_Machine_Learning_Quant_Strategies.py --end_date '2022-01-01'
    # parser = argparse.ArgumentParser(description='Execute Jupyter Notebook')
    # parser.add_argument('notebook', type=str, help='Path to the Jupyter notebook')
    # parser.add_argument('--end_date', type=str, required=True, help='End date to replace in the notebook')

    # args = parser.parse_args()
    # execute_notebook(args.notebook, args.end_date)
